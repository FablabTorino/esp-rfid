char mqttBuffer[512];

struct MqttMessage {
	char command[20];
	char uid[20];
	char user[64];
	char serializedMessage[512];
	MqttMessage *nextMessage = NULL;
};
MqttMessage *messageQueue = NULL;

void connectToMqtt()
{
#ifdef DEBUG
	Serial.println("[ INFO ] Connecting MQTT");
#endif
	mqttClient.connect();
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason)
{
	String reasonstr = "";
	switch (reason)
	{
	case (AsyncMqttClientDisconnectReason::TCP_DISCONNECTED):
		reasonstr = "TCP_DISCONNECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION):
		reasonstr = "MQTT_UNACCEPTABLE_PROTOCOL_VERSION";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED):
		reasonstr = "MQTT_IDENTIFIER_REJECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE):
		reasonstr = "MQTT_SERVER_UNAVAILABLE";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS):
		reasonstr = "MQTT_MALFORMED_CREDENTIALS";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED):
		reasonstr = "MQTT_NOT_AUTHORIZED";
		break;
	case (AsyncMqttClientDisconnectReason::ESP8266_NOT_ENOUGH_SPACE):
		reasonstr = "ESP8266_NOT_ENOUGH_SPACE";
		break;
	default:
		reasonstr = "Unknown";
		break;
	}
	writeEvent("WARN", "mqtt", "Disconnected from MQTT server", reasonstr);

	if (WiFi.isConnected())
	{
		mqttReconnectTimer.once(60, connectToMqtt);
	}
}

void mqttPublishEvent(JsonDocument *root)
{
	if (mqttClient.connected())
	{
		String stopic(config.mqttTopic);
		stopic = stopic + "/send";
		String mqttBuffer;
		serializeJson(*root, mqttBuffer);
		mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(mqttBuffer);
#endif
	}
}

void mqtt_publish_boot(time_t boot_time)
{
	String stopic(config.mqttTopic);
	stopic = stopic + "/send";
	DynamicJsonDocument root(512);
	root["type"] = "boot";
	root["time"] = boot_time;
	root["uptime"] = "0";
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;
	String mqttBuffer_boot;
	serializeJson(root, mqttBuffer_boot);
	mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer_boot.c_str());
#ifdef DEBUG
	Serial.print("[ INFO ] Mqtt Publish:");
	Serial.println(mqttBuffer_boot);
#endif
}

void mqtt_publish_discovery()
{
	String mtopic(config.mqttTopic);
	String deviceName = config.deviceHostname;

	String topic;
	DynamicJsonDocument jsonBuffer(512);
	String mqttBuffer;

	DynamicJsonDocument via(512);
	via["ids"] = WiFi.macAddress();

	for (int i = 0; i < 6; i++)
	{
		jsonBuffer.clear();
		mqttBuffer = "";
		switch (i)
		{
		case 0:
		{
			DynamicJsonDocument dev(512);
			dev["ids"] = WiFi.macAddress();
			dev["name"] = config.deviceHostname;
			dev["mf"] = "esp-rfid";
			dev["sw"] = VERSION;
			DynamicJsonDocument root(512);
			topic = "homeassistant/lock/" + deviceName + "/config";
			root["name"] = "Lock";
			root["uniq_id"] = deviceName + "/lock";
			root["stat_t"] = mtopic + "/io/lock";
			root["cmd_t"] = mtopic + "/cmd";
			root["pl_unlk"] = "{cmd:'opendoor'}";
			root["pl_lock"] = "{cmd:'opendoor'}";
			root["avty_t"] = mtopic + "/avty";
			root["dev"] = dev;
			serializeJson(root, mqttBuffer);
			break;
		}
		case 1:
		{
			DynamicJsonDocument door(512);
			topic = "homeassistant/binary_sensor/" + deviceName + "/door/config";
			door["name"] = "Door";
			door["uniq_id"] = deviceName + "/door";
			door["stat_t"] = mtopic + "/io/door";
			door["avty_t"] = mtopic + "/avty";
			door["dev_cla"] = "door";
			door["dev"] = via;
			serializeJson(door, mqttBuffer);
			break;
		}
		case 2:
		{
			DynamicJsonDocument doorbell(512);
			topic = "homeassistant/binary_sensor/" + deviceName + "/doorbell/config";
			doorbell["name"] = "Doorbell";
			doorbell["uniq_id"] = deviceName + "/doorbell";
			doorbell["stat_t"] = mtopic + "/io/doorbell";
			doorbell["avty_t"] = mtopic + "/avty";
			doorbell["dev_cla"] = "sound";
			doorbell["icon"] = "mdi:bell";
			doorbell["dev"] = via;
			serializeJson(doorbell, mqttBuffer);
			break;
		}
		case 3:
		{
			DynamicJsonDocument tag(512);
			topic = "homeassistant/sensor/" + deviceName + "/tag/config";
			tag["name"] = "Tag";
			tag["uniq_id"] = deviceName + "/tag";
			tag["stat_t"] = mtopic + "/tag";
			tag["avty_t"] = mtopic + "/avty";
			tag["val_tpl"] = "{{ value_json.uid }}";
			tag["json_attr_t"] = mtopic + "/tag";
			tag["icon"] = "mdi:key";
			tag["dev"] = via;
			serializeJson(tag, mqttBuffer);
			break;
		}
		case 4:
		{
			DynamicJsonDocument user(512);
			topic = "homeassistant/sensor/" + deviceName + "/user/config";
			user["name"] = "User";
			user["uniq_id"] = deviceName + "/name";
			user["stat_t"] = mtopic + "/tag";
			user["avty_t"] = mtopic + "/avty";
			user["val_tpl"] = "{{ value_json.username }}";
			user["json_attr_t"] = mtopic + "/tag";
			user["icon"] = "mdi:human";
			user["dev"] = via;
			serializeJson(user, mqttBuffer);
			break;
		}
		case 5:
		{
			DynamicJsonDocument tamper(512);
			topic = "homeassistant/binary_sensor/" + deviceName + "/tamper/config";
			tamper["name"] = "Door tamper";
			tamper["uniq_id"] = deviceName + "/tamper";
			tamper["stat_t"] = mtopic + "/io/tamper";
			tamper["avty_t"] = mtopic + "/avty";
			tamper["dev_cla"] = "safety";
			//tamper["icon"] = "mdi:bell";
			tamper["dev"] = via;
			serializeJson(tamper, mqttBuffer);
			break;
		}
		}
		mqttClient.publish(topic.c_str(), 0, true, mqttBuffer.c_str());
#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(mqttBuffer);
#endif
		delay(500);
	}
}

void mqtt_publish_avty()
{
	String mtopic(config.mqttTopic);
	String avty_topic = mtopic + "/avty";
	String payloadString = "online";
	mqttClient.publish(avty_topic.c_str(), 0, true, payloadString.c_str());
#ifdef DEBUG
	Serial.println("[ INFO ] Mqtt Publish online @ avty");
#endif
	delay(500);
}

void mqtt_publish_heartbeat(time_t heartbeat, time_t uptime)
{
	String stopic(config.mqttTopic);
	DynamicJsonDocument root(512);

	stopic = stopic + "/send";
	root["type"] = "heartbeat";
	root["time"] = heartbeat;
	root["uptime"] = uptime;
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;

	String mqttBuffer8;
	serializeJson(root, mqttBuffer8);
	mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer8.c_str());
#ifdef DEBUG
	Serial.print("[ INFO ] Mqtt Publish:");
	Serial.println(mqttBuffer8);
#endif
}

void mqttPublishAccess(time_t accesstime, String const &isknown, String const &type, String const &user, String const &uid)
{
	if (config.mqttEnabled && mqttClient.connected())
	{
		String stopic(config.mqttTopic);
		if (!config.mqttHA)
		{
			stopic = stopic + "/send";
		}
		else
		{
			stopic = stopic + "/tag";
		}
		DynamicJsonDocument root(512);
		// log to MQTT adding cmd command
		if (config.mqttEvents)
		{
			root["cmd"] = "log";
		}
		if (!config.mqttHA)
		{
			root["type"] = "access";
			root["time"] = accesstime;
			root["isKnown"] = isknown;
			root["access"] = type;
			root["username"] = user;
			root["uid"] = uid;
			root["door"] = config.deviceHostname;
		}
		else
		{
			root["uid"] = uid;
			root["username"] = user;
			root["access"] = type;
			root["time"] = accesstime;
		}
		String mqttBuffer;
		serializeJson(root, mqttBuffer);
		mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(mqttBuffer);
#endif
	}
}

void mqtt_publish_io(String const &io, String const &state)
{
	if (mqttClient.connected())
	{
		String stopic(config.mqttTopic);
		stopic = stopic + "/io/" + io;

		mqttClient.publish(stopic.c_str(), 0, false, state.c_str());

#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(state + " @ " + stopic);
#endif
	}
}

void onMqttPublish(uint16_t packetId)
{
	writeEvent("INFO", "mqtt", "MQTT publish acknowledged", String(packetId));
}

void ICACHE_FLASH_ATTR getUserList(int todo)
{
	String stopic(config.mqttTopic);
	if (todo == 0) // Userlist to add to DB
		stopic = stopic + "/accesslist";
	else if (todo == 1) // Just for List
		stopic = stopic + "/send";
	DynamicJsonDocument root(512);
	JsonArray users = root.createNestedArray("list");
	Dir dir = SPIFFS.openDir("/P/");
#ifdef DEBUG
	Serial.println("[ INFO ] getUserList");
#endif
	while (dir.next())
	{
		JsonObject item = users.createNestedObject();
		String uid = dir.fileName();
		uid.remove(0, 3);
		item["uid"] = uid;
		File f = SPIFFS.open(dir.fileName(), "r");
		size_t size = f.size();
		std::unique_ptr<char[]> buf(new char[size]);
		f.readBytes(buf.get(), size);
		DynamicJsonDocument json(512);
		auto error = deserializeJson(json, buf.get());
		if (!error)
		{

			if (mqttClient.connected())
			{
				String mqttBuffer;
				serializeJson(json, mqttBuffer);
				mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
#ifdef DEBUG
				Serial.print("[ INFO ] Mqtt Publish:");
				Serial.println(mqttBuffer);
#endif
			}
		}
	}
}

void DeleteAllUserFiles()
{
	Dir dir = SPIFFS.openDir("/P/");
	while (dir.next())
	{
		String uid = dir.fileName();
		uid.remove(0, 3);
		SPIFFS.remove(dir.fileName());
	}
}

void DeleteUserID(const char *uid)
{
	// only do this if a user id has been provided
	if (uid)
	{
		Dir dir = SPIFFS.openDir("/P/");
		while (dir.next())
		{
			String user_id = dir.fileName();
			String myuid = uid;
			user_id.remove(0, 3);
			if (myuid == user_id)
			{
				SPIFFS.remove(dir.fileName());
			}
		}
	}
}

void onMqttMessage(char *topic, char *payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total)
{
	size_t n = 0;
	size_t i = index;
	while(n < len) {
		mqttBuffer[i] = payload[n];
		n++;
		i++;
	}
	if(index + len == total) {
		mqttBuffer[i] = '\0';
	} else {
		return;
	}
#ifdef DEBUG
	Serial.print("[ INFO ] JSON msg: ");
	Serial.println(mqttBuffer);
#endif

	StaticJsonDocument<512> mqttIncomingJson;
	auto error = deserializeJson(mqttIncomingJson, mqttBuffer);
	if (error)
	{
#ifdef DEBUG
		Serial.print("[ INFO ] Failed parse MQTT message: ");
		Serial.println(mqttBuffer);
#endif
		return;
	}

	if (!config.mqttHA)
	{
		// Check if IP was send with command because we only
		// accept commands for this where sent IP is equal to device IP
		if (mqttIncomingJson.containsKey("doorip"))
		{
			const char *ipadr = mqttIncomingJson["doorip"];
			String espIp = WiFi.localIP().toString();
			if (!((strcmp(ipadr, espIp.c_str()) == 0) && (ipadr != NULL)))
			{
#ifdef DEBUG
				Serial.print("[ INFO ] ESP  IP: ");
				Serial.println(espIp);
				Serial.print("[ INFO ] recv IP: ");
				Serial.println(ipadr);
#endif
				return;
			}
		}
		else
		{
			return;
		}
	}

	if(ESP.getFreeHeap() < 2000)
	{
#ifdef DEBUG
		Serial.println("Dropping MQTT message, out of memory");
#endif
		writeEvent("ERRO", "mqtt", "Dropping MQTT message, out of memory","");
		return;
	}

	MqttMessage* incomingMessage = new MqttMessage;

	strlcpy(incomingMessage->command, mqttIncomingJson["cmd"], sizeof(incomingMessage->command));
	if (mqttIncomingJson.containsKey("uid")) {
		strlcpy(incomingMessage->uid, mqttIncomingJson["uid"], sizeof(incomingMessage->uid));
	}
	if (mqttIncomingJson.containsKey("user")) {
		strlcpy(incomingMessage->user, mqttIncomingJson["user"], sizeof(incomingMessage->user));
	}
	serializeJson(mqttIncomingJson, incomingMessage->serializedMessage);

	MqttMessage* lastMessage = messageQueue;
	if(lastMessage == NULL)
	{
		messageQueue = incomingMessage;
	}
	else {
		while(lastMessage->nextMessage != NULL)
		{
			lastMessage = lastMessage->nextMessage;
		}
		lastMessage->nextMessage = incomingMessage;
	}

	return;
}

void processMqttMessage(MqttMessage *incomingMessage) {
	char *command = incomingMessage->command;
	if (strcmp(command, "getuser") == 0)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] Get User List");
#endif
		getUserList(0);
	}

	else if (strcmp(command, "listusr") == 0)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] List users");
#endif
		getUserList(1);
	}

	else if (strcmp(command, "opendoor") == 0)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] Door open");
#endif
		writeLatest(" ", "MQTT", 1);
		mqttPublishAccess(now(), "true", "Always", "MQTT", " ");
		for (int currentRelay = 0; currentRelay < config.numRelays; currentRelay++)
		{
			activateRelay[currentRelay] = true;
		}
		previousMillis = millis();
	}

	else if (strcmp(command, "deletusers") == 0)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] Delete all users");
#endif
		DeleteAllUserFiles();
	}

	else if (strcmp(command, "deletuid") == 0)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] Delete a single user by uid");
#endif
		const char *uid = incomingMessage->uid;
		DeleteUserID(uid);
	}

	else if (strcmp(command, "adduser") == 0)
	{

#ifdef DEBUG
		Serial.print("[ INFO ] Add Users: ");
		const char *name = incomingMessage->user;
		Serial.println(name);
#endif

		const char *uid = incomingMessage->uid;
		String filename = "/P/";
		filename += uid;
		File f = SPIFFS.open(filename, "w+");
		// Check if we created the file
		if (f)
		{
			f.println(incomingMessage->serializedMessage);
		}
		f.close();
	}
	DynamicJsonDocument root(512);
	root["type"] = incomingMessage->command;
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;
	mqttPublishEvent(&root);
	
	free(incomingMessage);
	return;
}

void onMqttSubscribe(uint16_t packetId, uint8_t qos)
{
#ifdef DEBUG
	Serial.println("[ INFO ] Subscribe acknowledged.");
	Serial.print("[ INFO ] packetId: ");
	Serial.println(packetId);
	Serial.print("[ INFO ] qos: ");
	Serial.println(qos);
#endif
}

void onMqttConnect(bool sessionPresent)
{
#ifdef DEBUG
	Serial.println("[ INFO ] MQTT Connected session");
#endif
	if (sessionPresent == true)
	{
#ifdef DEBUG
		Serial.println("[ INFO ]MQTT session Present: True");
#endif
		writeEvent("INFO", "mqtt", "Connected to MQTT Server", "Session Present");
	}
	mqtt_publish_boot(now());

	String stopic(config.mqttTopic);
	stopic = stopic + "/cmd";
	uint16_t packetIdSub = mqttClient.subscribe(stopic.c_str(), 2);

#ifdef DEBUG
	Serial.print("[ INFO ] Subscribing at QoS 2, packetId: ");
	Serial.println(packetIdSub);
#endif

	if (digitalRead(config.doorstatpin) == HIGH)
		mqtt_publish_io("door", "OFF");
	else
		mqtt_publish_io("door", "ON");
	if (digitalRead(config.doorbellpin) == HIGH)
		mqtt_publish_io("doorbell", "ON");
	else
		mqtt_publish_io("doorbell", "OFF");
	mqtt_publish_io("lock", "LOCKED");
	if (config.mqttHA)
	{
		mqtt_publish_discovery();
		mqtt_publish_avty();
	}
}

void processMqttQueue() {
	while(messageQueue != NULL) {
		MqttMessage *messageToProcess = messageQueue;
		messageQueue = messageToProcess->nextMessage;
		processMqttMessage(messageToProcess);
	}
}

void setupMqtt()
{
    if (!config.mqttEnabled)
	{
		return;
	}

#ifdef DEBUG
	Serial.println("[ INFO ] Trying to setup MQTT");
#endif
	if (config.mqttHA)
	{
		String mtopic(config.mqttTopic);
		String topicString = mtopic + "/avty";
		String payloadString = "offline";
		char *topicLWT = strdup(topicString.c_str());
		char *payloadLWT = strdup(payloadString.c_str());
		mqttClient.setWill(topicLWT, 2, true, payloadLWT);
	}
	mqttClient.setServer(config.mqttHost, config.mqttPort);
	mqttClient.setCredentials(config.mqttUser, config.mqttPass);
	mqttClient.onDisconnect(onMqttDisconnect);
	mqttClient.onPublish(onMqttPublish);
	mqttClient.onSubscribe(onMqttSubscribe);
	mqttClient.onConnect(onMqttConnect);
	mqttClient.onMessage(onMqttMessage);
}
